<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ImageConvert Pro | Lossless Image Conversion</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #3b82f6;
            --primary-dark: #2563eb;
            --success: #10b981;
            --gray-light: #f3f4f6;
            --gray: #6b7280;
            --gray-dark: #374151;
            --white: #ffffff;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--gray-light);
            color: var(--gray-dark);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        header {
            background-color: var(--white);
            box-shadow: var(--shadow);
            padding: 15px 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary);
            text-decoration: none;
        }

        .logo span {
            color: var(--gray-dark);
        }

        .nav-links {
            display: flex;
            gap: 20px;
        }

        .nav-links a {
            text-decoration: none;
            color: var(--gray-dark);
            font-weight: 500;
            transition: color 0.3s;
        }

        .nav-links a:hover {
            color: var(--primary);
        }

        /* Hero Section */
        .hero {
            padding: 60px 0;
            text-align: center;
        }

        .hero h1 {
            font-size: 2.5rem;
            margin-bottom: 15px;
            color: var(--gray-dark);
        }

        .hero p {
            font-size: 1.1rem;
            color: var(--gray);
            max-width: 700px;
            margin: 0 auto 30px;
        }

        /* Upload Section */
        .upload-section {
            background-color: var(--white);
            border-radius: 10px;
            padding: 30px;
            box-shadow: var(--shadow-md);
            margin-bottom: 40px;
            text-align: center;
        }

        .upload-area {
            border: 2px dashed var(--gray);
            border-radius: 8px;
            padding: 40px 20px;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .upload-area:hover {
            border-color: var(--primary);
            background-color: rgba(59, 130, 246, 0.05);
        }

        .upload-area.dragover {
            border-color: var(--primary);
            background-color: rgba(59, 130, 246, 0.1);
        }

        .upload-icon {
            font-size: 48px;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .upload-text {
            margin-bottom: 15px;
        }

        .upload-text h3 {
            margin-bottom: 5px;
        }

        .upload-text p {
            color: var(--gray);
        }

        .btn {
            display: inline-block;
            background-color: var(--primary);
            color: var(--white);
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            text-decoration: none;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .btn:hover {
            background-color: var(--primary-dark);
        }

        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }

        .btn-outline:hover {
            background-color: rgba(59, 130, 246, 0.1);
        }

        /* Features Section */
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .feature-card {
            background-color: var(--white);
            border-radius: 8px;
            padding: 25px;
            box-shadow: var(--shadow-md);
            text-align: center;
        }

        .feature-icon {
            font-size: 36px;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .feature-card h3 {
            margin-bottom: 10px;
        }

        .feature-card p {
            color: var(--gray);
        }

        /* Settings Section */
        .settings-section {
            background-color: var(--white);
            border-radius: 10px;
            padding: 30px;
            box-shadow: var(--shadow-md);
            margin-bottom: 40px;
            display: none;
        }

        .settings-section.active {
            display: block;
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: var(--gray-dark);
        }

        .preview-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        @media (max-width: 768px) {
            .preview-container {
                grid-template-columns: 1fr;
            }
        }

        .preview-box {
            border: 1px solid var(--gray-light);
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }

        .preview-box h4 {
            margin-bottom: 10px;
        }

        .preview-image {
            max-width: 100%;
            max-height: 300px;
            margin: 0 auto;
            display: block;
        }

        .file-info {
            margin-top: 10px;
            color: var(--gray);
            font-size: 0.9rem;
        }

        .settings-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .settings-form {
                grid-template-columns: 1fr;
            }
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid var(--gray-light);
            border-radius: 8px;
            font-family: inherit;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .slider {
            flex-grow: 1;
            -webkit-appearance: none;
            height: 8px;
            border-radius: 4px;
            background: var(--gray-light);
            outline: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary);
            cursor: pointer;
        }

        .slider-value {
            min-width: 40px;
            text-align: center;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: var(--primary);
        }

        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }

        /* Results Section */
        .results-section {
            background-color: var(--white);
            border-radius: 10px;
            padding: 30px;
            box-shadow: var(--shadow-md);
            margin-bottom: 40px;
            text-align: center;
            display: none;
        }

        .results-section.active {
            display: block;
        }

        .success-icon {
            font-size: 48px;
            color: var(--success);
            margin-bottom: 20px;
        }

        .result-actions {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 30px;
        }

        /* Footer */
        footer {
            background-color: var(--white);
            padding: 30px 0;
            text-align: center;
            box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .footer-links {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .footer-links a {
            color: var(--gray);
            text-decoration: none;
            transition: color 0.3s;
        }

        .footer-links a:hover {
            color: var(--primary);
        }

        .copyright {
            color: var(--gray);
        }

        /* Toast Notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: var(--success);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: var(--shadow-md);
            display: flex;
            align-items: center;
            gap: 10px;
            transform: translateY(-100px);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast.error {
            background-color: #ef4444;
        }

        /* Progress Bar */
        .progress-container {
            width: 100%;
            height: 8px;
            background-color: var(--gray-light);
            border-radius: 4px;
            margin: 20px 0;
            overflow: hidden;
            display: none;
        }

        .progress-bar {
            height: 100%;
            background-color: var(--primary);
            width: 0%;
            transition: width 0.3s ease;
        }

        /* Mobile Menu */
        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
        }

        @media (max-width: 768px) {
            .mobile-menu-btn {
                display: block;
            }

            .nav-links {
                position: fixed;
                top: 70px;
                left: 0;
                width: 100%;
                background-color: var(--white);
                flex-direction: column;
                align-items: center;
                padding: 20px 0;
                box-shadow: var(--shadow);
                transform: translateY(-150%);
                transition: transform 0.3s ease;
                z-index: 99;
            }

            .nav-links.active {
                transform: translateY(0);
            }

            .nav-links a {
                padding: 10px 0;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="container header-content">
            <a href="#" class="logo">Image<span>Convert</span> Pro</a>
            <button class="mobile-menu-btn">☰</button>
            <nav class="nav-links">
                <a href="#" class="active">Convert Image</a>
                <a href="#">About</a>
                <a href="#">Help</a>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container">
        <!-- Hero Section -->
        <section class="hero">
            <h1>Convert Your Images Without Losing Quality</h1>
            <p>Fast, secure, and high-resolution conversion tool supporting JPEG, PNG, WEBP, TIFF, BMP, and more.</p>
        </section>

        <!-- Upload Section -->
        <section class="upload-section">
            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">📁</div>
                <div class="upload-text">
                    <h3>Drag & Drop Your Image Here</h3>
                    <p>or click to browse files (JPEG, PNG, WEBP, TIFF, BMP, HEIC supported)</p>
                </div>
                <input type="file" id="fileInput" accept="image/*" style="display: none;">
                <button class="btn" id="browseBtn">Browse Files</button>
            </div>
            <div class="progress-container" id="progressContainer">
                <div class="progress-bar" id="progressBar"></div>
            </div>
        </section>

        <!-- Features Section -->
        <section class="features">
            <div class="feature-card">
                <div class="feature-icon">🖼️</div>
                <h3>No Quality Loss</h3>
                <p>Preserve your image quality with our advanced conversion algorithms.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">🔧</div>
                <h3>All Formats</h3>
                <p>Convert between all popular image formats with just one click.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">⚡</div>
                <h3>Fast Conversion</h3>
                <p>Process your images quickly with our optimized conversion engine.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">📱</div>
                <h3>Mobile-Friendly</h3>
                <p>Works perfectly on all devices, from desktop to mobile.</p>
            </div>
        </section>

        <!-- Settings Section -->
        <section class="settings-section" id="settingsSection">
            <h2 class="section-title">Conversion Settings</h2>
            
            <div class="preview-container">
                <div class="preview-box">
                    <h4>Original Image</h4>
                    <img id="originalPreview" class="preview-image" src="" alt="Original Image Preview">
                    <p class="file-info">Size: <span id="originalSize">-</span> | Dimensions: <span id="originalDimensions">-</span></p>
                </div>
                <div class="preview-box">
                    <h4>Converted Preview</h4>
                    <img id="convertedPreview" class="preview-image" src="" alt="Converted Image Preview">
                    <p class="file-info">Size: <span id="convertedSize">-</span> | Dimensions: <span id="convertedDimensions">-</span></p>
                </div>
            </div>
            
            <form id="conversionForm" class="settings-form">
                <div class="form-group">
                    <label for="outputFormat">Output Format</label>
                    <select id="outputFormat" class="form-control">
                        <option value="png">PNG (Lossless)</option>
                        <option value="jpeg" selected>JPEG</option>
                        <option value="webp">WEBP</option>
                        <option value="bmp">BMP</option>
                        <option value="tiff">TIFF</option>
                        <option value="gif">GIF</option>
                        <option value="ico">ICO</option>
                        <option value="svg">SVG</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="quality">Quality</label>
                    <div class="slider-container">
                        <input type="range" min="1" max="100" value="90" class="slider" id="qualitySlider">
                        <span class="slider-value" id="qualityValue">90%</span>
                    </div>
                    <small>Higher values mean better quality but larger file size</small>
                </div>
                
                <div class="form-group">
                    <label for="resizeToggle">Resize Image</label>
                    <div>
                        <label class="toggle-switch">
                            <input type="checkbox" id="resizeToggle">
                            <span class="toggle-slider"></span>
                        </label>
                    </div>
                </div>
                
                <div class="form-group" id="widthGroup" style="display: none;">
                    <label for="imageWidth">Width (px)</label>
                    <input type="number" id="imageWidth" class="form-control" placeholder="Auto">
                </div>
                
                <div class="form-group" id="heightGroup" style="display: none;">
                    <label for="imageHeight">Height (px)</label>
                    <input type="number" id="imageHeight" class="form-control" placeholder="Auto">
                </div>
                
                <div class="form-group">
                    <label for="preserveAspect">Preserve Aspect Ratio</label>
                    <div>
                        <label class="toggle-switch">
                            <input type="checkbox" id="preserveAspect" checked>
                            <span class="toggle-slider"></span>
                        </label>
                    </div>
                </div>
            </form>
            
            <button class="btn" id="convertBtn">Start Conversion</button>
        </section>

        <!-- Results Section -->
        <section class="results-section" id="resultsSection">
            <div class="success-icon">✓</div>
            <h2 class="section-title">Conversion Successful!</h2>
            <p>Your image has been converted with the highest quality possible.</p>
            <div class="result-info">
                <p>Format: <span id="resultFormat">JPEG</span> | Size: <span id="resultSize">-</span></p>
                <p>Reduction: <span id="reductionPercent">-</span></p>
            </div>
            <div class="result-actions">
                <a href="#" class="btn" id="downloadBtn">Download Image</a>
                <button class="btn btn-outline" id="convertAnotherBtn">Convert Another</button>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="footer-links">
                <a href="#">Privacy Policy</a>
                <a href="#">Terms of Service</a>
                <a href="#">Contact Us</a>
            </div>
            <p class="copyright">© 2025 ImageConvert Pro. All rights reserved.</p>
        </div>
    </footer>

    <!-- Toast Notification -->
    <div class="toast" id="toast"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('fileInput');
            const browseBtn = document.getElementById('browseBtn');
            const settingsSection = document.getElementById('settingsSection');
            const resultsSection = document.getElementById('resultsSection');
            const originalPreview = document.getElementById('originalPreview');
            const convertedPreview = document.getElementById('convertedPreview');
            const qualitySlider = document.getElementById('qualitySlider');
            const qualityValue = document.getElementById('qualityValue');
            const resizeToggle = document.getElementById('resizeToggle');
            const widthGroup = document.getElementById('widthGroup');
            const heightGroup = document.getElementById('heightGroup');
            const convertBtn = document.getElementById('convertBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const convertAnotherBtn = document.getElementById('convertAnotherBtn');
            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');
            const toast = document.getElementById('toast');
            const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
            const navLinks = document.querySelector('.nav-links');
            const originalSizeElement = document.getElementById('originalSize');
            const convertedSizeElement = document.getElementById('convertedSize');
            const resultSizeElement = document.getElementById('resultSize');
            const resultFormatElement = document.getElementById('resultFormat');
            const reductionPercentElement = document.getElementById('reductionPercent');
            const originalDimensions = document.getElementById('originalDimensions');
            const convertedDimensions = document.getElementById('convertedDimensions');

            // Variables
            let originalFile = null;
            let convertedBlob = null;
            let originalImageData = null;

            // Event Listeners
            browseBtn.addEventListener('click', () => fileInput.click());
            fileInput.addEventListener('change', handleFileSelect);
            uploadArea.addEventListener('dragover', handleDragOver, false);
            uploadArea.addEventListener('dragleave', handleDragLeave, false);
            uploadArea.addEventListener('drop', handleDrop, false);
            qualitySlider.addEventListener('input', updateQualityValue);
            resizeToggle.addEventListener('change', toggleResizeOptions);
            convertBtn.addEventListener('click', startConversion);
            downloadBtn.addEventListener('click', downloadImage);
            convertAnotherBtn.addEventListener('click', resetConverter);
            mobileMenuBtn.addEventListener('click', toggleMobileMenu);
            document.getElementById('outputFormat').addEventListener('change', updatePreview);
            qualitySlider.addEventListener('input', updatePreview);
            document.getElementById('imageWidth').addEventListener('input', maintainAspectRatio);
            document.getElementById('imageHeight').addEventListener('input', maintainAspectRatio);

            // Initialize - Fix for first-time upload
            uploadArea.addEventListener('click', function(e) {
                // Only trigger file input if the click wasn't on a button
                if (e.target.tagName !== 'BUTTON') {
                    fileInput.click();
                }
            }, false);

            // Functions
            function handleFileSelect(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const file = e.target.files[0];
                if (!file) return;
                
                if (!file.type.match('image.*')) {
                    showToast('Please select an image file', 'error');
                    return;
                }
                
                processSelectedFile(file);
            }

            function handleDragOver(e) {
                e.preventDefault();
                e.stopPropagation();
                uploadArea.classList.add('dragover');
            }

            function handleDragLeave(e) {
                e.preventDefault();
                e.stopPropagation();
                uploadArea.classList.remove('dragover');
            }

            function handleDrop(e) {
                e.preventDefault();
                e.stopPropagation();
                uploadArea.classList.remove('dragover');
                
                const dt = e.dataTransfer;
                const file = dt.files[0];
                
                if (!file) return;
                
                if (!file.type.match('image.*')) {
                    showToast('Please select an image file', 'error');
                    return;
                }
                
                // Set the file to the input element
                fileInput.files = dt.files;
                processSelectedFile(file);
            }

            function processSelectedFile(file) {
                originalFile = file;
                originalSizeElement.textContent = formatFileSize(file.size);
                
                // Show preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    const img = new Image();
                    img.onload = function() {
                        originalImageData = {
                            width: img.width,
                            height: img.height,
                            aspectRatio: img.width / img.height
                        };
                        
                        originalPreview.src = e.target.result;
                        convertedPreview.src = e.target.result;
                        originalDimensions.textContent = `${img.width} × ${img.height}`;
                        
                        // Set default width/height if resize is enabled
                        if (resizeToggle.checked) {
                            document.getElementById('imageWidth').value = img.width;
                            document.getElementById('imageHeight').value = img.height;
                        }
                        
                        settingsSection.classList.add('active');
                        updatePreview();
                        
                        // Scroll to settings
                        setTimeout(() => {
                            settingsSection.scrollIntoView({ behavior: 'smooth' });
                        }, 100);
                    };
                    img.onerror = function() {
                        showToast('Error loading image', 'error');
                    };
                    img.src = e.target.result;
                };
                reader.onerror = function() {
                    showToast('Error reading file', 'error');
                };
                reader.readAsDataURL(file);
                
                showToast('Image loaded successfully!');
            }

            function updateQualityValue() {
                qualityValue.textContent = `${qualitySlider.value}%`;
            }

            function toggleResizeOptions() {
                if (resizeToggle.checked) {
                    widthGroup.style.display = 'block';
                    heightGroup.style.display = 'block';
                    
                    // Set default values if they're empty
                    if (originalImageData) {
                        if (!document.getElementById('imageWidth').value) {
                            document.getElementById('imageWidth').value = originalImageData.width;
                        }
                        if (!document.getElementById('imageHeight').value) {
                            document.getElementById('imageHeight').value = originalImageData.height;
                        }
                    }
                } else {
                    widthGroup.style.display = 'none';
                    heightGroup.style.display = 'none';
                }
                updatePreview();
            }

            function maintainAspectRatio(e) {
                if (!document.getElementById('preserveAspect').checked || !originalImageData) return;
                
                const target = e.target.id;
                const value = parseInt(e.target.value);
                
                if (target === 'imageWidth' && !isNaN(value)) {
                    document.getElementById('imageHeight').value = Math.round(value / originalImageData.aspectRatio);
                } else if (target === 'imageHeight' && !isNaN(value)) {
                    document.getElementById('imageWidth').value = Math.round(value * originalImageData.aspectRatio);
                }
                
                updatePreview();
            }

            function updatePreview() {
                if (!originalFile) return;
                
                generatePreview(
                    originalPreview.src,
                    convertedPreview,
                    parseInt(qualitySlider.value) / 100,
                    resizeToggle.checked,
                    document.getElementById('imageWidth').value,
                    document.getElementById('imageHeight').value,
                    document.getElementById('outputFormat').value
                ).then(blob => {
                    convertedSizeElement.textContent = formatFileSize(blob.size);
                    convertedDimensions.textContent = `${convertedPreview.naturalWidth} × ${convertedPreview.naturalHeight}`;
                }).catch(error => {
                    console.error('Preview error:', error);
                    showToast('Error generating preview', 'error');
                });
            }

            function generatePreview(src, targetElement, quality, shouldResize, width, height, format) {
                return new Promise((resolve, reject) => {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    const img = new Image();
                    
                    img.onload = function() {
                        // Set canvas dimensions
                        let imgWidth = img.width;
                        let imgHeight = img.height;
                        
                        // Apply resize if enabled
                        if (shouldResize) {
                            const newWidth = parseInt(width) || imgWidth;
                            const newHeight = parseInt(height) || imgHeight;
                            
                            if (newWidth > 0 && newHeight > 0) {
                                imgWidth = newWidth;
                                imgHeight = newHeight;
                            }
                        }
                        
                        canvas.width = imgWidth;
                        canvas.height = imgHeight;
                        
                        // Draw image with new dimensions
                        ctx.drawImage(img, 0, 0, imgWidth, imgHeight);
                        
                        // Get mime type
                        let mimeType;
                        switch(format.toLowerCase()) {
                            case 'jpeg':
                            case 'jpg': mimeType = 'image/jpeg'; break;
                            case 'png': mimeType = 'image/png'; break;
                            case 'webp': mimeType = 'image/webp'; break;
                            case 'bmp': mimeType = 'image/bmp'; break;
                            case 'tiff': mimeType = 'image/tiff'; break;
                            case 'gif': mimeType = 'image/gif'; break;
                            case 'ico': mimeType = 'image/x-icon'; break;
                            case 'svg': mimeType = 'image/svg+xml'; break;
                            default: mimeType = 'image/jpeg';
                        }
                        
                        // Update preview
                        canvas.toBlob(function(blob) {
                            if (!blob) {
                                reject(new Error('Failed to generate preview'));
                                return;
                            }
                            const previewUrl = URL.createObjectURL(blob);
                            targetElement.onload = function() {
                                URL.revokeObjectURL(previewUrl); // Clean up
                                resolve(blob);
                            };
                            targetElement.src = previewUrl;
                        }, mimeType, quality);
                    };
                    
                    img.onerror = function() {
                        reject(new Error('Image loading failed'));
                    };
                    
                    img.src = src;
                });
            }

            function startConversion() {
                if (!originalFile) {
                    showToast('Please select an image first', 'error');
                    return;
                }
                
                // Show progress bar
                progressContainer.style.display = 'block';
                progressBar.style.width = '0%';
                
                // Simulate conversion progress
                simulateProgress();
                
                // Perform actual conversion
                setTimeout(() => {
                    convertImage().then(blob => {
                        convertedBlob = blob;
                        
                        // Update result info
                        const format = document.getElementById('outputFormat').value;
                        resultFormatElement.textContent = format.toUpperCase();
                        resultSizeElement.textContent = formatFileSize(blob.size);
                        
                        // Calculate reduction percentage
                        const originalSize = originalFile.size;
                        const convertedSize = blob.size;
                        const reduction = ((originalSize - convertedSize) / originalSize * 100).toFixed(2);
                        reductionPercentElement.textContent = reduction > 0 ? 
                            `${reduction}% smaller` : 
                            `${Math.abs(reduction)}% larger`;
                        
                        // Show results section
                        settingsSection.classList.remove('active');
                        resultsSection.classList.add('active');
                        progressContainer.style.display = 'none';
                        
                        // Scroll to results
                        setTimeout(() => {
                            resultsSection.scrollIntoView({ behavior: 'smooth' });
                        }, 100);
                        
                        showToast('Conversion completed successfully!');
                    }).catch(error => {
                        console.error('Conversion error:', error);
                        showToast('Conversion failed. Please try again.', 'error');
                        progressContainer.style.display = 'none';
                    });
                }, 500);
            }

            async function convertImage() {
                return new Promise((resolve, reject) => {
                    const img = new Image();
                    img.onload = function() {
                        const canvas = document.createElement('canvas');
                        const ctx = canvas.getContext('2d');
                        
                        // Set canvas dimensions
                        let width = img.width;
                        let height = img.height;
                        
                        // Apply resize if enabled
                        if (resizeToggle.checked) {
                            const newWidth = parseInt(document.getElementById('imageWidth').value) || width;
                            const newHeight = parseInt(document.getElementById('imageHeight').value) || height;
                            
                            if (newWidth > 0 && newHeight > 0) {
                                width = newWidth;
                                height = newHeight;
                            }
                        }
                        
                        canvas.width = width;
                        canvas.height = height;
                        
                        // Draw image with new dimensions
                        ctx.drawImage(img, 0, 0, width, height);
                        
                        // Get format and quality
                        const format = document.getElementById('outputFormat').value;
                        const quality = parseInt(qualitySlider.value) / 100;
                        
                        // Convert to blob
                        canvas.toBlob(function(blob) {
                            if (!blob) {
                                reject(new Error('Conversion failed'));
                                return;
                            }
                            resolve(blob);
                        }, `image/${format}`, quality);
                    };
                    
                    img.onerror = function() {
                        reject(new Error('Image loading failed'));
                    };
                    
                    img.src = originalPreview.src;
                });
            }

            function simulateProgress() {
                let width = 0;
                const interval = setInterval(() => {
                    if (width >= 100) {
                        clearInterval(interval);
                    } else {
                        width += 5;
                        progressBar.style.width = `${width}%`;
                    }
                }, 100);
            }

            function downloadImage(e) {
                e.preventDefault();
                
                if (!convertedBlob) {
                    showToast('No converted image available', 'error');
                    return;
                }
                
                // Create a download link
                const url = URL.createObjectURL(convertedBlob);
                const a = document.createElement('a');
                a.href = url;
                
                // Set the filename
                const originalName = originalFile.name;
                const format = document.getElementById('outputFormat').value;
                const newName = originalName.replace(/\.[^/.]+$/, '') + '.' + format;
                a.download = newName;
                
                // Trigger download
                document.body.appendChild(a);
                a.click();
                
                // Clean up
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 100);
            }

            function resetConverter() {
                // Reset form
                fileInput.value = '';
                originalPreview.src = '';
                convertedPreview.src = '';
                qualitySlider.value = 90;
                qualityValue.textContent = '90%';
                resizeToggle.checked = false;
                toggleResizeOptions();
                document.getElementById('outputFormat').value = 'jpeg';
                document.getElementById('preserveAspect').checked = true;
                originalSizeElement.textContent = '-';
                convertedSizeElement.textContent = '-';
                originalDimensions.textContent = '-';
                convertedDimensions.textContent = '-';
                resultSizeElement.textContent = '-';
                reductionPercentElement.textContent = '-';
                
                // Hide sections
                settingsSection.classList.remove('active');
                resultsSection.classList.remove('active');
                
                // Scroll to top
                window.scrollTo({ top: 0, behavior: 'smooth' });
                
                // Reset variables
                originalFile = null;
                convertedBlob = null;
                originalImageData = null;
            }

            function showToast(message, type = 'success') {
                toast.textContent = message;
                toast.className = 'toast';
                toast.classList.add(type === 'error' ? 'error' : 'success');
                toast.classList.add('show');
                
                setTimeout(() => {
                    toast.classList.remove('show');
                }, 3000);
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            function toggleMobileMenu() {
                navLinks.classList.toggle('active');
            }
        });
    </script>
</body>
</html>
